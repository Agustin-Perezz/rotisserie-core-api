// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

model User {
  id        String   @id // Firebase UID
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shops     Shop[]
  paymentAccounts PaymentAccount[]
}

model PaymentAccount {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  provider     String
  mpUserId     Int?
  accessToken  String
  refreshToken String
  expiresIn    BigInt
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, provider])
}

model Shop {
  id          String   @id @default(uuid())
  name        String
  description String?
  location    String
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id])
  items       Item[]
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Item {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  image       String?
  shopId      String
  shop        Shop     @relation(fields: [shopId], references: [id])
  orderItems  OrderItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id          String      @id @default(uuid())
  shopId      String
  shop        Shop        @relation(fields: [shopId], references: [id])
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  deletedAt   DateTime?
  orderItems  OrderItem[]
}

model OrderItem {
  id       String @id @default(uuid())
  itemId   String
  item     Item   @relation(fields: [itemId], references: [id])
  orderId  String
  order    Order  @relation(fields: [orderId], references: [id])
  quantity Int
}
